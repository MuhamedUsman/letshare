# yaml-language-server: $schema=https://goreleaser.com/static/schema.json

version: 2

project_name: letshare

report_sizes: true

before:
  hooks:
    - go mod tidy

# ----------------------------------------------------------------------------------------------------------------------

builds:
  - ldflags:
      - -s -w -X main.version=v{{.Version}}
    goos:
      - linux
      - windows
      - darwin
    goarch:
      - amd64
      - arm64
    hooks:
      pre:
        # this hook runs after each build, but this hacks work, running this as global before hook
        # gives an error, because the dist dir is not clean, so it raises run it with clean flag
        - mkdir -p dist/signatures

# ----------------------------------------------------------------------------------------------------------------------

signs:
  - artifacts: checksum
    signature: '/signatures/{{ base .Env.artifact }}.sig'

# ----------------------------------------------------------------------------------------------------------------------

upx:
  - enabled: '{{ .Env.UPX_ENABLED }}'
    goos: [linux, windows] # Filter by GOOS.
    goarch: [arm, amd64]  # Filter by GOARCH.
    compress: best
    lzma: true
    brute: true

# ----------------------------------------------------------------------------------------------------------------------

archives:
  - formats: [tar.gz]
    name_template: >-
      {{ .ProjectName }}_
      {{- title .Os }}_
      {{- if eq .Arch "amd64" }}x86_64
      {{- else if eq .Arch "386" }}i386
      {{- else }}{{ .Arch }}{{ end }}
      {{- if .Arm }}v{{ .Arm }}{{ end }}
    format_overrides:
      - goos: windows
        formats: [zip]

# ----------------------------------------------------------------------------------------------------------------------

changelog:
  disable: true

# ----------------------------------------------------------------------------------------------------------------------

# .goreleaser.yaml - nFPM section
nfpms:
  - # Basic package info
    vendor: '{{ .Env.GITHUB_USERNAME }}'
    homepage: '{{ .Env.REPOSITORY_URL }}'
    maintainer: '{{ .Env.GITHUB_USERNAME }} <{{ .Env.GITHUB_EMAIL }}>'
    license: '{{ .Env.LICENSE }}'
    formats:
      - apk
      - deb
      - rpm
      - archlinux
    dependencies:
      - avahi-daemon
      - avahi-utils
    recommends:
      - avahi-autoipd
    scripts:
      postinstall: scripts/post-install-linux.sh
      preremove: scripts/pre-remove-linux.sh
    overrides:
      deb:
        dependencies:
          - avahi-daemon
          - libc6
      rpm:
        dependencies:
          - avahi
          - glibc
      apk:
        dependencies:
          - avahi
          - avahi-tools
          - musl
      archlinux:
        dependencies:
          - avahi

# ----------------------------------------------------------------------------------------------------------------------

release:
  draft: false
  use_existing_draft: false
  replace_existing_artifacts: true
  discussion_category_name: General
  mode: keep-existing
  header: |
    # {{ .ProjectName }} {{ .Version }}
    
     🐛 **Bug Fixes & Improvements**

  footer: |
    ## What's Changed
    - Fixed server shutdown issues with active downloads
    - Prevented app hanging when exiting with ongoing transfers
    
    ---
    
    **Feedback and contributions are much appreciated!**
    
    Built with ❤️ using Go

# ----------------------------------------------------------------------------------------------------------------------

# Homebrew Casks configuration
homebrew_casks:
  - repository:
      owner: '{{ .Env.GITHUB_USERNAME }}'
      name: homebrew-letshare
      branch: main
    description: '{{ .Env.DESCRIPTION }}'
    homepage: '{{ .Env.REPOSITORY_URL }}'
    license: '{{ .Env.LICENSE }}'
    commit_author:
      name: '{{ .Env.GITHUB_USERNAME }}'
      email: '{{ .Env.GITHUB_EMAIL }}'
      signing:
        enabled: true
    commit_msg_template: '{{ .ProjectName }}: {{ .Tag }}'
    url:
      using: ':homebrew_curl'
    caveats: |
      This application requires:
      1. Administrator privileges to bind to port 80 (run with 'sudo letshare' if needed)
      2. mDNS support for automatic network discovery
      
      For setup help, see: {{ .Env.REPOSITORY_URL }}#installation
    hooks:
      post:
        install: |
          if system_command("/usr/bin/xattr", args: ["-h"]).exit_status == 0
             system_command "/usr/bin/xattr", args: ["-dr", "com.apple.quarantine", "#{staged_path}/{{ .ProjectName }}"]
          end
    skip_upload: false

# ----------------------------------------------------------------------------------------------------------------------

# .goreleaser.yaml - Winget section
winget:
  - publisher: '{{ .Env.GITHUB_USERNAME }}'
    package_identifier: MuhamedUsman.Letshare
    short_description: '{{ .Env.DESCRIPTION }}'
    description: >-
      A terminal-based file sharing application that creates a local server on port 80
      and uses mDNS for automatic network discovery. Share files easily across your LAN
      with a simple TUI interface.
    license: '{{ .Env.LICENSE }}'
    homepage: "{{ .Env.REPOSITORY_URL }}"
    publisher_url: "{{ .Env.GITHUB_USER_PROFILE }}"
    publisher_support_url: '{{ .Env.REPOSITORY_URL }}/issues/new'
    license_url: '{{ .Env.REPOSITORY_URL }}/blob/main/LICENSE'
    tags:
      - file-sharing
      - lan
      - tui
      - terminal
      - mdns
      - network
      - cli
      - golang
    installation_notes: |
      This application requires:
      1. Administrator privileges to bind to port 80
      2. Windows firewall configuration may be needed
      3. Apple Bonjour service for mDNS network discovery
      
      Accept the pop-up that appears on the first run OR run as Administrator if you encounter port binding issues.
    dependencies:
      - package_identifier: Apple.Bonjour
        minimum_version: 3.1.0.1
    commit_author:
      name: '{{ .Env.GITHUB_USERNAME }}'
      email: '{{ .Env.GITHUB_EMAIL }}'
      signing:
        enabled: true
        program: gpg
    commit_msg_template: '{{ .PackageIdentifier }}: {{ .Tag }}'
    repository:
      owner: '{{ .Env.GITHUB_USERNAME }}'
      name: winget-pkgs
      branch: '{{ .ProjectName }}-{{ .Version }}'
      pull_request:
        enabled: true
        draft: false
        base:
          owner: microsoft
          name: winget-pkgs
          branch: master
    skip_upload: false